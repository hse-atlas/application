import { checkAndRefreshTokenIfNeeded } from '../api';
import { message } from 'antd';

// –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const TOKEN_CHECK_INTERVAL = 60000; // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

class TokenRefreshService {
  constructor() {
    this.intervalId = null;
    this.isActive = false;
    this.showNotifications = false; // –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  toggleNotifications(show) {
    this.showNotifications = show;
  }

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
  start() {
    if (this.isActive) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    this._checkTokenWithNotification();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.intervalId = setInterval(() => {
      this._checkTokenWithNotification();
    }, TOKEN_CHECK_INTERVAL);

    this.isActive = true;
    console.log('Token refresh service started');
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  async _checkTokenWithNotification() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
      const token = localStorage.getItem('access_token');
      if (!token) return;

      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      const jsonPayload = decodeURIComponent(
        atob(base64).split('').map(c => {
          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join('')
      );

      const { exp } = JSON.parse(jsonPayload);
      if (!exp) return;

      const currentTime = Math.floor(Date.now() / 1000);
      const expiresIn = exp - currentTime;

      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (expiresIn < 300) {
        const oldToken = token;
        await checkAndRefreshTokenIfNeeded();
        const newToken = localStorage.getItem('access_token');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (this.showNotifications && oldToken !== newToken) {
          message.info({
            content: 'Your session was automatically extended to keep you logged in.',
            duration: 3,
            style: { marginTop: '20px' },
          });
        }
      }
    } catch (error) {
      console.error('Error in token check with notification:', error);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
  stop() {
    if (!this.isActive) return;

    clearInterval(this.intervalId);
    this.intervalId = null;
    this.isActive = false;
    console.log('Token refresh service stopped');
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  registerEventListeners() {
    // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –∫–æ–≥–¥–∞ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        this.stop();
      } else {
        this.start(); // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω
    window.addEventListener('online', () => {
      checkAndRefreshTokenIfNeeded();
    });
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const tokenRefreshService = new TokenRefreshService();
tokenRefreshService.registerEventListeners();

// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
tokenRefreshService.debug = function() {
  this.toggleNotifications(true);
  console.log('%c[Token Service] üîç Debug mode enabled. You will see notifications when tokens are refreshed.',
    'background: #e6f7ff; color: #1890ff; padding: 4px; border-radius: 2px; font-weight: bold;');
};

export default tokenRefreshService;