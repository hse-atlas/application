// tokenRefreshService.js
import { checkAndRefreshTokenIfNeeded } from '../api'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
import { message } from 'antd';
import tokenService from './tokenService'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞

// –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const TOKEN_CHECK_INTERVAL = 60000; // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

class TokenRefreshService {
  constructor() {
    this.intervalId = null;
    this.isActive = false;
    this.showNotifications = false;
    this.isChecking = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  }

  toggleNotifications(show) {
    this.showNotifications = show;
  }

  start() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    if (this.isActive || !tokenService.isAuthenticated()) {
      console.log('[RefreshService] Not starting: Service active or user not authenticated.');
      return;
    }

    console.log('[RefreshService] Starting...');
    this.isActive = true;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    this._checkToken();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    this.intervalId = setInterval(() => {
      this._checkToken();
    }, TOKEN_CHECK_INTERVAL);

    console.log(`[RefreshService] Started with interval ${TOKEN_CHECK_INTERVAL / 1000}s.`);
  }

  async _checkToken() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –µ—â–µ –∏–¥–µ—Ç
    if (this.isChecking) {
      console.debug('[RefreshService] Check already in progress, skipping interval.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –Ω–µ –≥–æ–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑—Ä—è
    if (!tokenService.isAuthenticated()) {
      console.debug('[RefreshService] No token found, stopping service.');
      this.stop();
      return;
    }

    this.isChecking = true;
    console.debug('[RefreshService] Performing token check...');

    try {
      const oldToken = tokenService.getAccessToken(); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await checkAndRefreshTokenIfNeeded(); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const newToken = tokenService.getAccessToken(); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Ä–µ–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å—Ç–∞—Ä—ã–π, –∏ –Ω–æ–≤—ã–π, —Ç.–∫. —Ç–æ–∫–µ–Ω –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (this.showNotifications && oldToken && newToken && oldToken !== newToken) {
        message.info({
          content: 'Your session was automatically extended.',
          duration: 3,
          style: { marginTop: '20px' },
        });
        console.log('[RefreshService] Session extended notification shown.');
      }
    } catch (error) {
      // –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ checkAndRefreshTokenIfNeeded –∏–ª–∏ refreshAuthToken
      console.error('[RefreshService] Error during scheduled check:', error.message);
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ, –æ–Ω –ø–æ–ø—Ä–æ–±—É–µ—Ç —Å–Ω–æ–≤–∞
    } finally {
      this.isChecking = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      console.debug('[RefreshService] Token check finished.');
    }
  }

  stop() {
    if (!this.isActive) return;

    clearInterval(this.intervalId);
    this.intervalId = null;
    this.isActive = false;
    this.isChecking = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    console.log('[RefreshService] Stopped.');
  }

  registerEventListeners() {
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        console.debug('[RefreshService] Tab hidden, stopping service.');
        this.stop();
      } else {
        // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å (–æ–Ω —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–æ–∫–µ–Ω)
        console.debug('[RefreshService] Tab focused, starting service.');
        this.start();
      }
    });

    window.addEventListener('online', () => {
      // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏ - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
      console.debug('[RefreshService] Network online, ensuring service is running.');
      this.start();
    });

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ logout, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å
    window.addEventListener('logout', () => {
      console.debug('[RefreshService] Logout event detected, stopping service.');
      this.stop();
    });
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ login, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å
    window.addEventListener('login', () => {
      console.debug('[RefreshService] Login event detected, starting service.');
      this.start();
    });
  }
}

// --- –≠–∫—Å–ø–æ—Ä—Ç –∏ –¥–µ–±–∞–≥ ---
const tokenRefreshService = new TokenRefreshService();
tokenRefreshService.registerEventListeners();

tokenRefreshService.debug = function () {
  this.toggleNotifications(true);
  console.log('%c[RefreshService] üîç Debug mode enabled.', 'background: #e6f7ff; color: #1890ff; padding: 4px; border-radius: 2px; font-weight: bold;');
};

export default tokenRefreshService;