// ./api/index.js
import axios from "axios";
import tokenService from "../services/tokenService"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤—ã–º URL
const api = axios.create({
  baseURL: window.location.origin, // –ò–ª–∏ –≤–∞—à API_URL –∏–∑ .env
  // withCredentials: false // –£–±–∏—Ä–∞–µ–º, —Ç.–∫. –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å cookie
  // timeout: 10000 // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç (10 —Å–µ–∫—É–Ω–¥)
});

// --- –õ–æ–≥–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ---
let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token); // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    }
  });
  failedQueue = [];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
const refreshAuthToken = async () => {
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º
  if (isRefreshing) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è/–æ—Ç–∫–ª–æ–Ω–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    return new Promise((resolve, reject) => {
      failedQueue.push({ resolve, reject });
    });
  }

  isRefreshing = true;

  try {
    console.log('%c[API] üîÑ Starting token refresh...', 'background: #e6f7ff; color: #1890ff; padding: 2px 4px; border-radius: 2px;');
    const refreshToken = tokenService.getRefreshToken();
    if (!refreshToken) {
      console.warn('[API] No refresh token available for refresh.');
      throw new Error('No refresh token available'); // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ catch
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ api instance, —Ç.–∫. –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–∏—Ç Authorization,
    // –∞ –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é –¥–ª—è /refresh —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    // (–Ω–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)
    const response = await api.post("/api/auth/refresh/", {
      // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ —Ç–µ–ª–µ, –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –±—ç–∫–µ–Ω–¥
      refresh_token: refreshToken
    }, {
      _isRetryRequest: true // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª –æ—à–∏–±–∫—É —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ 401
    });

    const { access_token, refresh_token } = response.data;
    tokenService.saveTokens({ access_token, refresh_token }); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã

    console.log('%c[API] ‚úÖ Tokens refreshed successfully!', 'background: #f6ffed; color: #52c41a; padding: 2px 4px; border-radius: 2px;');
    processQueue(null, access_token); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
    return access_token; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω

  } catch (error) {
    console.log('%c[API] ‚ùå Token refresh failed.', 'background: #fff2f0; color: #f5222d; padding: 2px 4px; border-radius: 2px;', error.response?.data || error.message);
    processQueue(error, null); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å –æ—à–∏–±–∫–æ–π
    tokenService.clearTokens(); // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏/–æ—Ç–º–µ–Ω—ã
    // –∏ —Å–µ—Ä–≤–µ—Ä —è–≤–Ω–æ —Å–∫–∞–∑–∞–ª, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 401 –Ω–∞ /refresh)
    if (error.response && (error.response.status === 401 || error.response.status === 400)) {
      console.log('[API] Redirecting to login due to refresh failure.');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
      if (window.location.pathname !== '/login') { // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç, –µ—Å–ª–∏ —É–∂–µ –Ω–∞ –ª–æ–≥–∏–Ω–µ
        window.location.href = '/login';
      }
    }
    // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ
    throw error;
  } finally {
    isRefreshing = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  }
};

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞
api.interceptors.response.use(
  (response) => {
    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∑–¥–µ—Å—å
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ 401 –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (error.response && error.response.status === 401 && !originalRequest._isRetryRequest) {
      console.warn('[API] Received 401 Unauthorized. Attempting token refresh.');
      originalRequest._isRetryRequest = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏

      try {
        const newToken = await refreshAuthToken(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–æ–Ω–æ —Å–∞–º–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å)
        // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –±—É–¥–µ—Ç –≤ localStorage
        // –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –µ–≥–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ
        console.log('[API] Retrying original request with new token.');
        return api(originalRequest); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      } catch (refreshError) {
        // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, refreshAuthToken —É–∂–µ —Å–¥–µ–ª–∞–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç/–æ—á–∏—Å—Ç–∫—É
        // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã Promise –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª—Å—è
        return Promise.reject(refreshError);
      }
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö –¥–∞–ª—å—à–µ
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
api.interceptors.request.use(
  (config) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π access —Ç–æ–∫–µ–Ω –∏–∑ localStorage
    const token = tokenService.getAccessToken();
    if (token && !config.headers.Authorization) { // –î–æ–±–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ)
      config.headers.Authorization = `Bearer ${token}`;
      console.debug('[API] Added Authorization header to request:', config.url);
    }
    // –£–±–∏—Ä–∞–µ–º withCredentials, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª
    // config.withCredentials = false;
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ tokenRefreshService)
export const checkAndRefreshTokenIfNeeded = async () => {
  try {
    const tokenInfo = tokenService.checkTokenExpiration();

    if (!tokenInfo.isValid) {
      console.log('%c[API] Token is not valid or expired.', 'color: #f5222d;');
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å refresh —Ç–æ–∫–µ–Ω
      if (tokenService.getRefreshToken()) {
        console.log('[API] Attempting refresh due to invalid access token.');
        await refreshAuthToken(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      } else {
        console.log('[API] No refresh token available, cannot refresh.');
        tokenService.clearTokens(); // –û—á–∏—â–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        // –†–µ–¥–∏—Ä–µ–∫—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ª–æ–≥–∏–Ω–µ
        if (window.location.pathname !== '/login') {
          window.location.href = '/login';
        }
      }
      return; // –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
    }

    // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥)
    const REFRESH_THRESHOLD_SECONDS = 300;

    if (tokenInfo.expiresIn < REFRESH_THRESHOLD_SECONDS) {
      console.log('%c[API] ‚è∞ Token expires soon, attempting proactive refresh...', 'background: #fffbe6; color: #faad14; padding: 2px 4px; border-radius: 2px;', {
        expires_in_seconds: tokenInfo.expiresIn,
        token_exp: tokenInfo.expirationTime.toLocaleTimeString()
      });
      await refreshAuthToken(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    } else {
      // console.log('%c[API] ‚úì Token is still valid.', 'color: #52c41a;', {
      //   expires_in_minutes: Math.floor(tokenInfo.expiresIn / 60),
      //   token_exp: tokenInfo.expirationTime.toLocaleTimeString()
      // });
    }
  } catch (error) {
    // –û—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ refreshAuthToken
    console.error('[API] Error during proactive token check/refresh:', error.message);
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π UUID
export const isValidUUID = (str) => {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(str);
};

// –≠–∫—Å–ø–æ—Ä—Ç API —Ñ—É–Ω–∫—Ü–∏–π

export const register = async (credentials) => {
  return api.post(
    "/api/auth/admin/register/",
    credentials
  );
};

export const login = async (credentials) => {
  return api.post("/api/auth/admin/login/", credentials);
};

export const getProjects = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    await checkAndRefreshTokenIfNeeded();
    const response = await api.get("/api/projects/");
    return response;
  } catch (error) {
    throw error;
  }
};

export const getMe = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    await checkAndRefreshTokenIfNeeded();
    const response = await api.get(
      "/api/auth/admin/me"
    );
    return response;
  } catch (error) {
    throw error;
  }
};

export const addProject = async (data) => {
  try {
    await checkAndRefreshTokenIfNeeded();
    const response = await api.post("/api/projects/", data);
    return response;
  } catch (error) {
    throw error;
  }
};

export const getProjectDetails = async (id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.get(`/api/projects/${id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const editeProject = async (id, data) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.put(`/api/projects/${id}`, data);
    return response;
  } catch (error) {
    throw error;
  }
};

export const deleteProject = async (id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.delete(`/api/projects/${id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const deleteUser = async (id) => {
  try {
    await checkAndRefreshTokenIfNeeded();
    const response = await api.delete(`/api/users/${id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const blockUser = async (user_id) => {
  try {
    await checkAndRefreshTokenIfNeeded();
    const response = await api.patch(`/api/users/${user_id}/block`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const unblockUser = async (user_id) => {
  try {
    await checkAndRefreshTokenIfNeeded();
    const response = await api.patch(`/api/users/${user_id}/unblock`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const registerUser = async (project_id, data) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    const response = await api.post(
      `/api/auth/user/register/${project_id}`,
      data
    );
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const loginUser = async (project_id, data) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    const response = await api.post(
      `/api/auth/user/login/${project_id}`,
      data
    );
    return response.data;
  } catch (error) {
    const errorMessage = error.response?.data?.detail || "Login failed";
    throw new Error(errorMessage);
  }
};

export const getProjectRedirectUrl = async (project_id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }
    const response = await api.get(`/api/projects/${project_id}/url`);
    return response.data;
  } catch (error) {
    const errorMessage =
      error.response?.data?.detail || "Failed to get redirect URL";
    throw new Error(errorMessage);
  }
};

export const changeUserRole = async (project_id, user_id, new_role) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ project_id —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.put(
      `/api/projects/${project_id}/users/${user_id}/role`,
      { new_role }
    );
    return response;
  } catch (error) {
    throw error;
  }
};

export const getProjectUsers = async (project_id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.get(`/api/projects/${project_id}/users`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const getProjectUser = async (project_id, user_id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.get(`/api/projects/${project_id}/users/${user_id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const deleteProjectUser = async (project_id, user_id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.delete(`/api/projects/${project_id}/users/${user_id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const updateProjectOAuth = async (project_id, oauth_settings) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.put(`/api/projects/${project_id}/oauth`, oauth_settings);
    return response;
  } catch (error) {
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OAuth –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
 * @param {string} projectId - ID –ø—Ä–æ–µ–∫—Ç–∞
 * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å { oauth_enabled: boolean, enabled_providers: string[] }
 */
export const getProjectOAuthConfig = async (projectId) => {
  try {
    const response = await api.get(`/api/projects/${projectId}/oauth-config`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching OAuth config for project ${projectId}:`, error);
    // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –µ–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–π–º–∞—Ç—å –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    throw error;
  }
};