import axios from "axios";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤—ã–º URL
const api = axios.create({
  baseURL: window.location.origin,
  withCredentials: true // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookie
});

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
let isRefreshing = false;
// –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
let failedQueue = [];

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
const processQueue = (error, token = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });

  failedQueue = [];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º refresh_token
const refreshTokens = async () => {
  try {
    console.log('%c[Token] üîÑ Starting token refresh...', 'background: #e6f7ff; color: #1890ff; padding: 2px 4px; border-radius: 2px;');
    const refreshToken = localStorage.getItem('refresh_token');
    if (!refreshToken) {
      throw new Error('No refresh token available');
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios –±–µ–∑ –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
    const refreshApi = axios.create({
      baseURL: "/",
      withCredentials: true
    });

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (–ò–ó–ú–ï–ù–ï–ù –ü–£–¢–¨)
    const response = await refreshApi.post("/api/auth/refresh/", {
      refresh_token: refreshToken
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    const { access_token, refresh_token } = response.data;
    localStorage.setItem('access_token', access_token);
    localStorage.setItem('refresh_token', refresh_token);

    console.log('%c[Token] ‚úÖ Tokens refreshed successfully!', 'background: #f6ffed; color: #52c41a; padding: 2px 4px; border-radius: 2px;', {
      access_token_starts_with: access_token.substring(0, 15) + '...',
      refresh_token_starts_with: refresh_token.substring(0, 15) + '...'
    });

    return access_token;
  } catch (error) {
    console.log('%c[Token] ‚ùå Token refresh failed', 'background: #fff2f0; color: #f5222d; padding: 2px 4px; border-radius: 2px;', error);
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—ã–Ω—É–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');

    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    window.location.href = '/login';
    throw error;
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
api.interceptors.response.use(
  (response) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ Cookie –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å localStorage
    const cookies = document.cookie.split(';').reduce((cookies, cookie) => {
      const [name, value] = cookie.trim().split('=');
      cookies[name] = value;
      return cookies;
    }, {});

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ localStorage, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ cookie
    if (cookies.admins_access_token) {
      localStorage.setItem('access_token', cookies.admins_access_token);
      console.log('Access token updated from cookie');
    }

    if (cookies.admins_refresh_token) {
      localStorage.setItem('refresh_token', cookies.admins_refresh_token);
      console.log('Refresh token updated from cookie');
    }

    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ (401)
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ retry, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
      originalRequest._retry = true;

      // –ï—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        })
          .then(token => {
            originalRequest.headers['Authorization'] = `Bearer ${token}`;
            return api(originalRequest);
          })
          .catch(err => {
            return Promise.reject(err);
          });
      }

      isRefreshing = true;

      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const newToken = await refreshTokens();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤
        processQueue(null, newToken);

        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
        return api(originalRequest);
      } catch (refreshError) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å –æ—à–∏–±–∫–æ–π
        processQueue(refreshError, null);
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    return Promise.reject(error);
  }
);

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("access_token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è access_token –∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
export const checkAndRefreshTokenIfNeeded = async () => {
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = localStorage.getItem('access_token');
    if (!token) return;

    // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏)
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(
      atob(base64).split('').map(c => {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
      }).join('')
    );

    const { exp } = JSON.parse(jsonPayload);
    if (!exp) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const currentTime = Math.floor(Date.now() / 1000);

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 5 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if (exp - currentTime < 300) { // 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
      console.log('%c[Token] ‚è∞ Token will expire soon, refreshing...', 'background: #fffbe6; color: #faad14; padding: 2px 4px; border-radius: 2px;', {
        expires_in_seconds: exp - currentTime,
        token_exp: new Date(exp * 1000).toLocaleTimeString()
      });
      await refreshTokens();
    } else {
      console.log('%c[Token] ‚úì Token valid', 'color: #52c41a;', {
        expires_in_minutes: Math.floor((exp - currentTime) / 60),
        token_exp: new Date(exp * 1000).toLocaleTimeString()
      });
    }
  } catch (error) {
    console.error('Error checking token expiration:', error);
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π UUID
export const isValidUUID = (str) => {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(str);
};

// –≠–∫—Å–ø–æ—Ä—Ç API —Ñ—É–Ω–∫—Ü–∏–π

export const register = async (credentials) => {
  return api.post(
    "/api/auth/admin/register/",
    credentials
  );
};

export const login = async (credentials) => {
  return api.post("/api/auth/admin/login/", credentials);
};

export const getProjects = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    await checkAndRefreshTokenIfNeeded();
    const response = await api.get("/api/projects/");
    return response;
  } catch (error) {
    throw error;
  }
};

export const getMe = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    await checkAndRefreshTokenIfNeeded();
    const response = await api.get(
      "/api/auth/admin/me"
    );
    return response;
  } catch (error) {
    throw error;
  }
};

export const addProject = async (data) => {
  try {
    await checkAndRefreshTokenIfNeeded();
    const response = await api.post("/api/projects/", data);
    return response;
  } catch (error) {
    throw error;
  }
};

export const getProjectDetails = async (id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.get(`/api/projects/${id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const editeProject = async (id, data) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.put(`/api/projects/${id}`, data);
    return response;
  } catch (error) {
    throw error;
  }
};

export const deleteProject = async (id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.delete(`/api/projects/${id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const deleteUser = async (id) => {
  try {
    await checkAndRefreshTokenIfNeeded();
    const response = await api.delete(`/api/users/${id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const registerUser = async (project_id, data) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    const response = await api.post(
      `/api/auth/user/register/${project_id}`,
      data
    );
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const loginUser = async (project_id, data) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    const response = await api.post(
      `/api/auth/user/login/${project_id}`,
      data
    );
    return response.data;
  } catch (error) {
    const errorMessage = error.response?.data?.detail || "Login failed";
    throw new Error(errorMessage);
  }
};

export const getProjectRedirectUrl = async (project_id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    const response = await api.get(`/api/projects/${project_id}/url`);
    return response.data;
  } catch (error) {
    const errorMessage =
      error.response?.data?.detail || "Failed to get redirect URL";
    throw new Error(errorMessage);
  }
};

export const changeUserRole = async (project_id, user_id, new_role) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ project_id —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.put(
      `/api/projects/${project_id}/users/${user_id}/role`,
      { new_role }
    );
    return response;
  } catch (error) {
    throw error;
  }
};

export const getProjectUsers = async (project_id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.get(`/api/projects/${project_id}/users`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const getProjectUser = async (project_id, user_id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.get(`/api/projects/${project_id}/users/${user_id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const deleteProjectUser = async (project_id, user_id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.delete(`/api/projects/${project_id}/users/${user_id}`);
    return response;
  } catch (error) {
    throw error;
  }
};

export const updateProjectOAuth = async (project_id, oauth_settings) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
    if (!isValidUUID(project_id)) {
      throw new Error("Invalid project ID format");
    }

    await checkAndRefreshTokenIfNeeded();
    const response = await api.put(`/api/projects/${project_id}/oauth`, oauth_settings);
    return response;
  } catch (error) {
    throw error;
  }
};
